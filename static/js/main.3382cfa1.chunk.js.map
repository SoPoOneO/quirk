{"version":3,"sources":["features/tile/Tile.module.css","features/tile/Tile.tsx","app/hooks.ts","slices/gameSlice.ts","features/Board/Square.tsx","features/Board/Board.tsx","features/bag/Bag.tsx","features/players/Players.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx","features/players/Player.module.css"],"names":["module","exports","Shape","Color","useAppDispatch","useDispatch","useAppSelector","useSelector","getFullTileSet","tileSet","id","colorVal","shapeVal","i","color","shape","push","Tile","className","styles","tile","style","DragableTile","useDrag","type","item","collect","monitor","isDragging","drag","ref","opacity","cursor","display","MoveType","GameStatus","getNewMove","placements","points","Normal","getInitialGrid","rows","cols","Array","map","e","fill","initialState","players","moves","bag","replenishAllHands","forEach","player","replenishHand","shuffle","hand","length","pop","selectBag","state","game","selectPlayers","currentPlayer","selectCurrentPlayer","playerIndex","filter","move","moveIndex","totalPoints","reduce","memo","atBat","selectGrid","grid","placement","position","row","col","getPopulatedGrid","selectGameStatus","getGameStatus","Setup","Ongoing","getCurrentPlayer","gameSlice","createSlice","name","reducers","addPlacement","action","payload","finishMove","currentMove","addPlayer","uuidv4","removePlayer","startGame","resetGame","actions","Square","dispatch","useDrop","accept","drop","isOver","getCellContents","Board","table","j","Bag","Players","gameStatus","initialValue","useState","value","setValue","reset","bind","onChange","event","target","useInput","onClick","clickRemovePlayer","key","App","DndProvider","backend","HTML5Backend","width","float","clear","store","configureStore","reducer","gameReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,KAAO,qB,qFCKbC,EASAC,E,wDCVCC,EAAiB,kBAAMC,eACvBC,EAAkDC,I,uDDwBxD,SAASC,IACd,IAAIC,EAA2B,GAC3BC,EAAK,EACT,IAAK,IAAIC,KAAYR,EACnB,IAAK,IAAIS,KAAYV,EACnB,IAAI,IAAIW,EAAI,EAAGA,EA/BL,EA+BkBA,IAAI,CAC9BH,IACA,IAAII,EAAcX,EAAMQ,GACpBI,EAAcb,EAAMU,GACxBH,EAAQO,KAAK,CAACF,QAAOC,QAAOL,OAKlC,OAAOD,G,SAtCGP,K,eAAAA,E,gBAAAA,E,gBAAAA,E,eAAAA,E,gBAAAA,E,kBAAAA,M,cASAC,K,UAAAA,E,gBAAAA,E,cAAAA,E,eAAAA,E,iBAAAA,E,iBAAAA,M,KAgCZ,IAAMc,EAAO,SAAC,GAAqC,IAAnCH,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,MACrB,OACE,qBAAKG,UAAWC,IAAOC,KAAMC,MAAO,CAACP,SAArC,SAA+CC,KAI5C,SAASO,EAAaF,GAAsB,IAAD,EACnBG,aAAQ,iBAAO,CAC1CC,KAAM,OACNC,KAAML,EACNM,QAAS,SAAAC,GAAO,MAAK,CACnBC,aAAcD,EAAQC,mBALsB,mBACxCA,EADwC,KACxCA,WAAaC,EAD2B,KAShD,OACE,qBACEC,IAAKD,EACLR,MAAO,CACLU,QAASH,EAAa,GAAM,EAC5BI,OAAQ,OACRC,QAAS,gBALb,SAQE,cAAC,EAAD,eAAUb,MAKDH,IEhEHiB,EAKAC,EF2DGlB,I,mCEhEHiB,K,gBAAAA,E,eAAAA,M,cAKAC,K,cAAAA,E,kBAAAA,E,aAAAA,M,KAsCZ,IAAMC,EAAa,WACjB,MAAO,CACLC,WAAY,GACZC,OAAQ,EACRd,KAAMU,EAASK,SAQbC,EAAiB,WACrB,OAL4BC,EAtDR,GAsDsBC,EAvDvB,GAwDZ,YAAIC,MAAMF,IAAOG,KAAI,SAAAC,GAAC,OAAIF,MAAMD,GAAMI,KAAK,SAD/B,IAASL,EAAcC,GA0BxCK,EAA6B,CAC/BC,QAAS,GACTC,MAAO,GACPC,IAAK1C,KAGP,SAAS2C,EAAkBH,EAA8BE,GACvDF,EAAQI,SAAQ,SAAAC,GACdC,EAAcD,EAAQH,MAI1B,SAASI,EAAcD,EAA2BH,GAEhD,IADAK,IAAQL,GACFG,EAAOG,KAAKC,OA7FH,GA6FqB,CAClC,IAAIrC,EAA+B8B,EAAIQ,MACpCtC,GACDiC,EAAOG,KAAKxC,KAAKI,IAShB,IAAMuC,EAAY,SAACC,GAAD,OAAsBA,EAAMC,KAAKX,KAE7CY,EAAgB,SAACF,GAE5B,IAAIZ,EAAUY,EAAMC,KAAKb,QACrBe,EAAgBC,EAAoBJ,GAExC,OAAOZ,EAAQJ,KAAI,SAACS,EAAQY,GAC1B,IAAIhB,EAAwBW,EAAMC,KAAKZ,MAAMiB,QAAO,SAACC,EAAMC,GACzD,OAAOA,EAAYpB,EAAQS,SAAWQ,KAEpCI,EAAcpB,EAAMqB,QAAO,SAACC,EAAMJ,GAAP,OAAgBI,EAAOJ,EAAK7B,SAAQ,GAC/DkC,EAA2B,OAAlBT,GAA4BA,EAAcrD,KAAO2C,EAAO3C,GACrE,OAAO,2BAAI2C,GAAX,IAAmBJ,QAAOoB,cAAaG,cAI9BC,EAAa,SAACb,GACzB,OA9DuB,SAASX,GAEhC,IAAIyB,EAAOlC,IAOX,OANAS,EAAMG,SAAQ,SAAAe,GACZA,EAAK9B,WAAWe,SAAQ,SAAAuB,GACtBD,EAAKC,EAAUC,SAASC,KAAKF,EAAUC,SAASE,KAAOH,EAAUvD,WAI9DsD,EAqDAK,CAAiBnB,EAAMC,KAAKZ,QAIxB+B,EAAmB,SAACpB,GAC/B,OAAOqB,EAAcrB,EAAMC,KAAKZ,QAG5BgC,EAAgB,SAAChC,GACrB,OAAwB,IAAjBA,EAAMQ,OAAetB,EAAW+C,MAAQ/C,EAAWgD,SAG/CnB,EAAsB,SAACJ,GAElC,IAAIX,EAAQW,EAAMC,KAAKZ,MACnBD,EAAUY,EAAMC,KAAKb,QAEzB,OAAOoC,EAAiBnC,EAAOD,IAG3BoC,EAAmB,SAACnC,EAAuBD,GAE/C,OADiBiC,EAAchC,KACbd,EAAWgD,SAA4B,IAAjBlC,EAAMQ,OACrC,KAGFT,GADmBC,EAAMQ,OAAO,GAAKT,EAAQS,SAKzC4B,EAAYC,YAAY,CACnCC,KAAM,OACNxC,eAEAyC,SAAU,CACRC,aADQ,SACK7B,EAAO8B,GAGlB9B,EAAMX,MAAMW,EAAMX,MAAMQ,OAAS,GAAGpB,WAAWrB,KAAK0E,EAAOC,SAG3D,IAAI5B,EAAgBqB,EAAiBxB,EAAMX,MAAOW,EAAMZ,SACrDe,IACDA,EAAcP,KAAd,OAAqBO,QAArB,IAAqBA,OAArB,EAAqBA,EAAeP,KAAKU,QAAO,SAAA9C,GAAI,OAAIA,EAAKV,KAAOgF,EAAOC,QAAQvE,KAAKV,QAG5FkF,WAZQ,SAYGhC,GACT,IAAIG,EAAgBqB,EAAiBxB,EAAMX,MAAOW,EAAMZ,SACpD6C,EAAcjC,EAAMX,MAAMW,EAAMX,MAAMQ,OAAS,GACnDoC,EAAYvD,OAASuD,EAAYxD,WAAWoB,OACzCM,GACDT,EAAcS,EAAeH,EAAMV,KAErCU,EAAMX,MAAMjC,KAAKoB,MAEnB0D,UArBQ,SAqBElC,EAAO8B,GA7ErB,IAAyBH,EA8EnB3B,EAAMZ,QAAQhC,MA9EKuE,EA8EgBG,EAAOC,QAAS/B,EAAMV,IA7EtD,CAACqC,OAAM/B,KAAM,GAAI9C,GAAIqF,kBA+E1BC,aAxBQ,SAwBKpC,EAAO8B,GAClB9B,EAAMZ,QAAUY,EAAMZ,QAAQkB,QAAO,SAAAb,GAAM,OAAIA,EAAO3C,KAAOgF,EAAOC,QAAQjF,OAE9EuF,UA3BQ,SA2BErC,GACRT,EAAkBS,EAAMZ,QAASY,EAAMV,KACvCU,EAAMX,MAAMjC,KAAKoB,MAEnB8D,UA/BQ,SA+BEtC,GACRA,EAAMX,MAAQ,GACdW,EAAMV,IAAM1C,IACZoD,EAAMZ,QAAQI,SAAQ,SAAAC,GACpBA,EAAOG,KAAO,MAEhBL,EAAkBS,EAAMZ,QAASY,EAAMV,S,EAM8CmC,EAAUc,QAAtFV,E,EAAAA,aAAcG,E,EAAAA,WAAYE,E,EAAAA,UAAWE,E,EAAAA,aAAcC,E,EAAAA,UAAWC,E,EAAAA,UAE9Db,IAAf,Q,yBC1MO,SAASe,EAAT,GAAkD,IAAhChF,EAA+B,EAA/BA,KAAMwD,EAAyB,EAAzBA,SAEvByB,EAAWjG,IAFqC,EAI9BkG,YAAQ,CAC9BC,OAAQ,OACRC,KAAM,SAACpF,EAAqBO,GAC1B0E,EAASZ,EAAa,CAACrE,OAAMwD,eAE/BlD,QAAS,SAAAC,GAAO,MAAK,CACnB8E,SAAU9E,EAAQ8E,aAVgC,mBAItCD,GAJsC,KAI/CC,OAJ+C,MAkBtD,OACE,oBAAI3E,IAAK0E,EAAT,SALoB,SAASpF,GAC7B,OAAOA,EAAQ,cAAC,EAAD,eAAUA,IAAY,GAKjCsF,CAAgBtF,KCrBjB,SAASuF,GAAT,GAAsC,IAArBjC,EAAoB,EAApBA,KAGtB,OACE,8BACE,uBAAOxD,UAAWC,IAAOyF,MAAzB,SACE,gCACIlC,EAAK9B,KAAI,SAACiC,EAAKhE,GAAN,OACT,6BACGgE,EAAIjC,KAAI,SAACxB,EAAMyF,GAAP,OACP,cAACT,EAAD,CAAgBhF,KAAMA,EAAMwD,SAAU,CAACC,IAAKhE,EAAGiE,IAAK+B,IAAvCA,OAFRhG,YCXd,SAASiG,GAAT,GAAiC,IAAlB5D,EAAiB,EAAjBA,IAEpB,OACE,8BACIA,EAAIN,KAAI,SAACxB,GAAD,OACR,cAAC,EAAD,eAAwBA,GAAbA,EAAKV,S,uBCDjB,SAASqG,GAAT,GAAuD,IAArC/D,EAAoC,EAApCA,QAASgE,EAA2B,EAA3BA,WAE1BX,EAAWjG,IAF0C,ELFrC,SAAC6G,GAAsB,IAAD,EAClBC,mBAASD,GADS,mBACrCE,EADqC,KAC9BC,EAD8B,KAG5C,MAAO,CACLD,QACAC,WACAC,MAAO,kBAAMD,EAAS,KACtBE,KAAM,CACJH,QACAI,SAAU,SAACC,GACTJ,EAASI,EAAMC,OAAON,UKJGO,CAAS,IAAhCP,EAJmD,EAInDA,MAAOG,EAJ4C,EAI5CA,KAAMD,EAJsC,EAItCA,MAyBrB,OACE,gCACE,+CAAmBL,EAAnB,OACA,mCAAOxF,KAAK,QAAW8F,IACvB,wBAAQK,QA3BS,WACN,KAAVR,IACDd,EAASP,EAAUqB,IACnBE,MAwBA,wBAEA,uBACA,uBAEA,gCACE,wBAAQM,QAtBO,WACnBtB,EAASJ,MAqBL,wBADF,uBAGE,wBAAQ0B,QApBO,WACnBtB,EAASH,MAmBL,uBAHF,uBAKE,wBAAQyB,QAlBQ,WACpBtB,EAAST,MAiBL,4BAGF,wBAAO1E,UAAWC,KAAOyF,MAAzB,UACE,gCACE,+BACE,wCACC5D,EAAQJ,KAAI,SAACS,GAAD,OACX,qBAAoBnC,UAAWmC,EAAOmB,MAAQrD,KAAOqD,MAAQ,GAA7D,UACE,4BAAInB,EAAOkC,OACX,wBAAQoC,QAAS,kBAxCP,SAACtE,GACvBgD,EAASL,EAAa3C,IAuCauE,CAAkBvE,IAAzC,sBAFOA,EAAO3C,YAStB,kCACE,+BACE,uCACCsC,EAAQJ,KAAI,SAACS,GAAD,OACX,oBAAInC,UAAWmC,EAAOmB,MAAQrD,KAAOqD,MAAQ,GAA7C,SACGnB,EAAOJ,MAAML,KAAI,SAACuB,EAAoB0C,GAArB,OAChB,4BAAY1C,EAAK7B,QAATuE,OAF0CxD,EAAO3C,UAOjE,+BACE,uCACCsC,EAAQJ,KAAI,SAACS,GAAD,OACX,oBAAInC,UAAWmC,EAAOmB,MAAQrD,KAAOqD,MAAQ,GAA7C,SACGnB,EAAOgB,aAD4ChB,EAAO3C,UAKjE,+BACE,sCACCsC,EAAQJ,KAAI,SAACS,GAAD,OACX,oBAAInC,UAAWmC,EAAOmB,MAAQrD,KAAOqD,MAAQ,GAA7C,SACInB,EAAOG,KAAKZ,KAAI,SAAAxB,GAAI,OACpB,wBAACE,EAAD,2BAAmBF,GAAnB,IAA0ByG,IAAMzG,EAAKV,UAFa2C,EAAO3C,mB,sBC3D5DoH,OAxBf,WAEE,IAAMpD,EAAOpE,EAAemE,GACtBvB,EAAM5C,EAAeqD,GACrBX,EAA4B1C,EAAewD,GAC3CkD,EAAa1G,EAAe0E,GAElC,OACE,eAAC+C,GAAA,EAAD,CAAaC,QAASC,KAAtB,UACE,gCACE,qBAAK5G,MAAO,CAAC6G,MAAO,MAAOC,MAAO,QAAlC,SACE,cAACxB,GAAD,CAAOjC,KAAOA,MAEhB,qBAAKrD,MAAO,CAAC6G,MAAO,MAAOC,MAAO,QAAlC,SACE,cAACpB,GAAD,CAAS/D,QAAUA,EAAUgE,WAAaA,SAG9C,qBAAK3F,MAAO,CAAC+G,MAAO,QAApB,SACE,cAACtB,GAAD,CAAK5D,IAAMA,UCxBNmF,GAAQC,YAAe,CAClCC,QAAS,CACP1E,KAAM2E,KCOUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUX,MAAOA,GAAjB,SACE,cAAC,GAAD,QAGJY,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,a,kBE7I5B5J,EAAOC,QAAU,CAAC,MAAQ,yB","file":"static/js/main.3382cfa1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"tile\":\"Tile_tile__1uSkn\"};","import styles from './Tile.module.css';\n\nimport { useDrag } from 'react-dnd'\n\nconst repeats = 3;\n\nexport enum Shape {\n  Cross = \"✚\",\n  Square = \"▪\",\n  Circle = \"●\",\n  Burst = \"✸\",\n  Clover = \"✤\",\n  Diamond = \"✦\"\n}\n\nexport enum Color {\n  Red = \"red\",\n  Yellow = \"yellow\",\n  Green = \"green\",\n  Blue = \"#006eff\",\n  Purple = \"#9149ad\",\n  Orange = \"orange\"\n}\n\nexport interface TileInterface {\n  color: Color;\n  shape: Shape;\n  id: number;\n}\n\nexport function getFullTileSet(): TileInterface[] {\n  let tileSet: TileInterface[] = [];\n  let id = 0;\n  for (let colorVal in Color) {\n    for (let shapeVal in Shape) {\n      for(let i = 0; i < repeats; i++){\n        id++;\n        let color:Color = Color[colorVal as keyof typeof Color];\n        let shape:Shape = Shape[shapeVal as keyof typeof Shape];\n        tileSet.push({color, shape, id})\n      }\n    }\n  }\n\n  return tileSet;\n}\n\nconst Tile = ({ color, shape }: TileInterface) => { \n  return (\n    <div className={styles.tile} style={{color}}>{ shape }</div>\n  );\n}\n\nexport function DragableTile(tile: TileInterface) {\n  const [{isDragging}, drag] = useDrag(() => ({\n    type: \"tile\",\n    item: tile,\n    collect: monitor => ({\n      isDragging: !!monitor.isDragging(),\n    }),\n  }))\n\n  return (\n    <div\n      ref={drag} \n      style={{\n        opacity: isDragging ? 0.2 : 1,\n        cursor: 'move',\n        display: 'inline-block'\n      }}\n    >\n      <Tile {...tile} />\n    </div>\n  )\n}\n\nexport default Tile;","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\nimport { useState } from \"react\";\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n\nexport const useInput = (initialValue:any) => {\n  const [value, setValue] = useState(initialValue);\n\n  return {\n    value,\n    setValue,\n    reset: () => setValue(\"\"),\n    bind: {\n      value,\n      onChange: (event:any) => {\n        setValue(event.target.value);\n      }\n    }\n  };\n};\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../app/store';\nimport { TileInterface, getFullTileSet } from '../features/tile/Tile';\nimport { createSelector } from 'reselect';\nimport { v4 as uuidv4 } from 'uuid';\nimport shuffleArray from 'shuffle-array';\nimport shuffle from 'shuffle-array';\n\nconst initialWidth = 12;\nconst initialHeight = 12;\nconst handSize = 6;\n\nexport enum MoveType {\n  Normal = \"normal\",\n  Trade = \"trade\"\n}\n\nexport enum GameStatus {\n  Setup = \"setup\",\n  Ongoing = \"ongoing\",\n  Over = \"over\"\n}\n\ninterface Placement {\n  tile: TileInterface;\n  position: Position;\n}\n\nexport interface Position {\n  row: number;\n  col: number;\n}\n\ninterface RawPlayerInterface {\n  id: string;\n  name: string;\n  hand: TileInterface[];\n}\n\nexport interface PlayerInterface {\n  id: string;\n  name: string;\n  hand: TileInterface[];\n  moves: MoveInterface[];\n  totalPoints: number;\n  atBat: boolean;\n}\n\n\nexport interface MoveInterface {\n  placements: Placement[];\n  points: number;\n  type: MoveType|null;\n}\n\nconst getNewMove = function(): MoveInterface {\n  return {\n    placements: [],\n    points: 0,\n    type: MoveType.Normal\n  }\n}\n\nconst getBlankGrid = function(rows: number, cols: number): (TileInterface|null)[][]{\n  return [...Array(rows)].map(e => Array(cols).fill(null));\n}\n\nconst getInitialGrid = function(): (TileInterface|null)[][]{\n  return getBlankGrid(initialHeight, initialWidth);\n}\n\nconst getPopulatedGrid = function(moves: MoveInterface[]): (TileInterface|null)[][] {\n\n  let grid = getInitialGrid();\n  moves.forEach(move => {\n    move.placements.forEach(placement => {\n      grid[placement.position.row][placement.position.col] = placement.tile;\n    })\n  });\n\n  return grid;\n}\n\ninterface GameInterface {\n  players: RawPlayerInterface[];\n  moves: MoveInterface[];\n  bag: TileInterface[];\n}\n\nlet initialState:GameInterface = {\n  players: [],\n  moves: [],\n  bag: getFullTileSet()\n}\n\nfunction replenishAllHands(players:RawPlayerInterface[], bag:TileInterface[]){\n  players.forEach(player => {\n    replenishHand(player, bag);\n  })\n}\n\nfunction replenishHand(player:RawPlayerInterface, bag:TileInterface[]){\n  shuffle(bag);\n  while(player.hand.length < handSize){\n    let tile:TileInterface|undefined = bag.pop();\n    if(tile){\n      player.hand.push(tile);\n    }\n  }\n}\n\nfunction createNewPlayer(name:string, bag:TileInterface[]): RawPlayerInterface {\n  return {name, hand: [], id: uuidv4()}\n}\n\nexport const selectBag = (state: RootState) => state.game.bag;\n\nexport const selectPlayers = (state: RootState): PlayerInterface[] => {\n\n  let players = state.game.players;\n  let currentPlayer = selectCurrentPlayer(state);\n\n  return players.map((player, playerIndex) => {\n    let moves:MoveInterface[] = state.game.moves.filter((move, moveIndex) => {\n      return moveIndex % players.length === playerIndex\n    });\n    let totalPoints = moves.reduce((memo, move) => memo + move.points, 0);\n    let atBat = (currentPlayer !== null) && (currentPlayer.id === player.id);\n    return {...player, moves, totalPoints, atBat}\n  });\n}\n\nexport const selectGrid = (state: RootState) => {\n  return getPopulatedGrid(state.game.moves);\n}\n\n\nexport const selectGameStatus = (state: RootState) => {\n  return getGameStatus(state.game.moves);\n}\n\nconst getGameStatus = (moves:MoveInterface[]) => {\n  return moves.length === 0 ? GameStatus.Setup : GameStatus.Ongoing;\n}\n\nexport const selectCurrentPlayer = (state: RootState): RawPlayerInterface|null => {\n\n  let moves = state.game.moves;\n  let players = state.game.players;\n\n  return getCurrentPlayer(moves, players);\n}\n\nconst getCurrentPlayer = (moves:MoveInterface[], players:RawPlayerInterface[]): RawPlayerInterface|null => {\n  let gameStatus = getGameStatus(moves);\n  if(gameStatus !== GameStatus.Ongoing || moves.length === 0){\n    return null;\n  }\n  let currentPlayerIndex = (moves.length-1) % players.length;\n  return players[currentPlayerIndex];\n}\n\n\nexport const gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    addPlacement(state, action: PayloadAction<Placement>){\n\n      // add it to the current move\n      state.moves[state.moves.length - 1].placements.push(action.payload);\n\n      // remove it from the current player's hand\n      let currentPlayer = getCurrentPlayer(state.moves, state.players);\n      if(currentPlayer){\n        currentPlayer.hand = currentPlayer?.hand.filter(tile => tile.id !== action.payload.tile.id);\n      }\n    },\n    finishMove(state){\n      let currentPlayer = getCurrentPlayer(state.moves, state.players);\n      let currentMove = state.moves[state.moves.length - 1];\n      currentMove.points = currentMove.placements.length;\n      if(currentPlayer){\n        replenishHand(currentPlayer, state.bag);\n      }\n      state.moves.push(getNewMove());\n    },\n    addPlayer(state, action: PayloadAction<string>){\n      state.players.push(createNewPlayer(action.payload, state.bag));\n    },\n    removePlayer(state, action: PayloadAction<PlayerInterface>){\n      state.players = state.players.filter(player => player.id !== action.payload.id);\n    },\n    startGame(state){\n      replenishAllHands(state.players, state.bag);\n      state.moves.push(getNewMove());\n    },\n    resetGame(state){\n      state.moves = [];\n      state.bag = getFullTileSet();\n      state.players.forEach(player => {\n        player.hand = [];\n      });\n      replenishAllHands(state.players, state.bag);\n    }\n  }\n});\n\n\nexport const { addPlacement, finishMove, addPlayer, removePlayer, startGame, resetGame } = gameSlice.actions;\n\nexport default gameSlice.reducer;","import { useDrop } from \"react-dnd\";\nimport { useAppDispatch } from \"../../app/hooks\";\nimport { addPlacement, Position } from \"../../slices/gameSlice\";\nimport Tile, { TileInterface } from \"../tile/Tile\";\n\ntype SquareProps = {\n  tile: TileInterface|null;\n  position: Position;\n}\n\nexport function Square({ tile, position }: SquareProps) {\n\n  const dispatch = useAppDispatch();\n\n  const[{isOver}, drop] = useDrop({\n    accept: \"tile\",\n    drop: (tile: TileInterface, monitor) => {\n      dispatch(addPlacement({tile, position}));\n    },\n    collect: monitor => ({\n      isOver: !!monitor.isOver()\n    })\n  })\n\n  let getCellContents = function(tile: TileInterface|null){\n    return tile ? (<Tile {...tile} />) : \"\";\n  }\n\n  return (\n    <td ref={drop}>\n      { getCellContents(tile) }\n    </td>\n  )\n}","import styles from './Board.module.css';\n\nimport { TileInterface } from '../tile/Tile'\nimport { Square } from './Square';\n\ntype BoardProps = {\n  grid: (TileInterface|null)[][]\n}\n\nexport function Board({ grid }: BoardProps) { \n\n\n  return (\n    <div>\n      <table className={styles.table}>\n        <tbody>\n          { grid.map((row, i) => (\n            <tr key={i}> \n              {row.map((tile, j) => (\n                <Square key={j} tile={tile} position={{row: i, col: j}}/>\n              ))}\n            </tr>\n          ))} \n        </tbody>\n      </table>\n    </div>\n  )\n}","import Tile, { TileInterface } from '../tile/Tile'\n\ntype BagProps = {\n  bag: TileInterface[]\n}\n\nexport function Bag({ bag }: BagProps) { \n\n  return (\n    <div>\n      { bag.map((tile) => (\n        <Tile key={tile.id} {...tile} />\n      ))}\n    </div>\n  )\n}\n","import { useAppDispatch, useInput } from \"../../app/hooks\";\nimport { addPlayer, removePlayer, startGame, resetGame, finishMove, PlayerInterface, GameStatus, MoveInterface } from \"../../slices/gameSlice\";\nimport { DragableTile } from \"../tile/Tile\";\nimport styles from './Player.module.css';\n\ntype PlayersProps = {\n  players: PlayerInterface[];\n  gameStatus: GameStatus;\n}\n\nexport function Players({players, gameStatus}: PlayersProps) {\n\n  const dispatch = useAppDispatch();\n\n  const { value, bind, reset } = useInput('');\n\n  let clickAddPlayer = () => {\n    if(value !== \"\"){\n      dispatch(addPlayer(value));\n      reset();\n    }\n  }\n\n  let clickRemovePlayer = (player: PlayerInterface) => {\n    dispatch(removePlayer(player));\n  }\n\n  let clickStartGame = () => {\n    dispatch(startGame());\n  }\n\n  let clickResetGame = () => {\n    dispatch(resetGame());\n  }\n\n  let clickFinishMove = () => {\n    dispatch(finishMove());\n  }\n\n  return (\n    <div>\n      <h1>Game Status: { gameStatus } </h1>\n      <input type=\"text\" {...bind} />\n      <button onClick={clickAddPlayer}>Add Player</button>\n\n      <br />\n      <br />\n\n      <div>\n        <button onClick={clickStartGame}>Start Game</button>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n        <button onClick={clickResetGame}>Rest Game</button>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n        <button onClick={clickFinishMove}>Finish Move</button>\n      </div>\n\n      <table className={styles.table}>\n        <thead>\n          <tr>\n            <th>Player</th>\n            {players.map((player:PlayerInterface) => (\n              <td key={player.id} className={player.atBat ? styles.atBat : \"\"}>\n                <p>{player.name}</p>\n                <button onClick={() => clickRemovePlayer(player)}>\n                  Remove\n                </button>\n              </td>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <th>Moves</th>\n            {players.map((player:PlayerInterface) => (\n              <td className={player.atBat ? styles.atBat : \"\"} key={player.id}>\n                {player.moves.map((move:MoveInterface, j:number) => (\n                  <p key={j}>{move.points}</p>\n                ))}\n              </td>\n            ))}\n          </tr>\n          <tr>\n            <th>Total</th>\n            {players.map((player:PlayerInterface) => (\n              <td className={player.atBat ? styles.atBat : \"\"} key={player.id}>\n                {player.totalPoints}\n              </td>\n            ))}\n          </tr>\n          <tr>\n            <th>Hand</th>\n            {players.map((player:PlayerInterface) => (\n              <td className={player.atBat ? styles.atBat : \"\"} key={player.id}>\n                { player.hand.map(tile => (\n                  <DragableTile { ...tile } key={ tile.id } />\n                ))}\n              </td>\n            ))}\n          </tr>\n        </tbody>\n      </table>\n\n    </div>\n  )\n};","import { useAppSelector } from './app/hooks';\nimport { selectGrid, selectPlayers, selectGameStatus, selectBag, PlayerInterface, selectCurrentPlayer } from './slices/gameSlice';\nimport { Board } from './features/Board/Board'\nimport { Bag } from './features/bag/Bag'\nimport { Players } from './features/players/Players'\n\nimport { DndProvider } from 'react-dnd'\nimport { HTML5Backend } from 'react-dnd-html5-backend'\n\nfunction App() {\n\n  const grid = useAppSelector(selectGrid);\n  const bag = useAppSelector(selectBag);\n  const players:PlayerInterface[] = useAppSelector(selectPlayers);\n  const gameStatus = useAppSelector(selectGameStatus);\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <div>\n        <div style={{width: \"50%\", float: \"left\"}}>\n          <Board grid={ grid }/>\n        </div>\n        <div style={{width: \"50%\", float: \"left\"}}>\n          <Players players={ players } gameStatus={ gameStatus }/>\n        </div>\n      </div>\n      <div style={{clear: \"both\"}}>\n        <Bag bag={ bag } />\n      </div>\n    </DndProvider>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport gameReducer from '../slices/gameSlice';\n\nexport const store = configureStore({\n  reducer: {\n    game: gameReducer\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"atBat\":\"Player_atBat__11DT8\"};"],"sourceRoot":""}